

simdjson minify drops the trailing '.0' from floats, which is fine by JSON spec,
but matters in practice. For example, Elasticsearch dynamic field type detection
is affected. In general, Python distinguishes between int and float, so various
type guarantees may fail. The dump/load cycle should not convert types for a few
byte gain. Let users explicitly convert types, if they need to.

This modifies minify, so it does not drop the '.0'.

Note: simdjson started dropping '.0' with d0821adf0e7934f27a8eb5c2fe9b8254e4.



--- simdjson/simdjson_source/simdjson.cpp	2022-11-22 09:20:33.402000000 +0200
+++ simdjson/simdjson.cpp	2022-11-22 09:19:27.854085130 +0200
@@ -868,9 +868,9 @@

     std::memset(buf + k, '0', static_cast<size_t>(n) - static_cast<size_t>(k));
     // Make it look like a floating-point number (#362, #378)
-    // buf[n + 0] = '.';
-    // buf[n + 1] = '0';
-    return buf + (static_cast<size_t>(n));
+    buf[n + 0] = '.';
+    buf[n + 1] = '0';
+    return buf + (static_cast<size_t>(n) + 2U);
   }

   if (0 < n && n <= max_exp) {
@@ -933,10 +933,8 @@
   {
     *first++ = '0';
     // Make it look like a floating-point number (#362, #378)
-    if(negative) {
-      *first++ = '.';
-      *first++ = '0';
-    }
+    *first++ = '.';
+    *first++ = '0';
     return first;
   }
   // Compute v = buffer * 10^decimal_exponent.
