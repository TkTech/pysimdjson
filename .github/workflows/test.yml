name: Run tests

on: [push, pull_request, workflow_dispatch]

jobs:
  # Tests that are platform-agnostic.
  universal:
    runs-on: ubuntu-latest
    steps:
    - name: Set up Python 3.9
      uses: actions/setup-python@v2
      with:
        python-version: 3.9

    - uses: actions/checkout@v2

    - name: Installing platform dependencies
      run: >
        sudo apt-get install -y
        build-essential
        clang-6.0

    - name: Installing python dependencies
      env:
        BUILD_WITH_CYTHON: 1
        BUILD_FOR_DEBUG: 1
      run: |
        python -m pip install --upgrade pip wheel
        pip install cython
        pip install -e '.[test]'
        rm simdjson/csimdjson.cpp
        python setup.py develop

    - name: Running tests with pytest
      run: |
        coverage run -m pytest

    - name: Generating coverage report
      run: |
        coverage report -m

    - name: Checking flake8
      run: |
        flake8

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: [3.6, 3.7, 3.8, 3.9]

    steps:
      # Python needs to be setup before checkout to prevent files from being
      # left in the source tree. See setup-python/issues/106.
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}

    - uses: actions/checkout@v2

    - name: Installing platform dependencies
      if: matrix.os == 'ubuntu-latest'
      run: >
        sudo apt-get install -y
        build-essential
        clang-6.0

    - name: Installing python dependencies
      env:
        BUILD_WITH_CYTHON: 1
      run: |
        python -m pip install --upgrade pip wheel
        pip install cython
        pip install -e '.[test]'
        rm simdjson/csimdjson.cpp
        python setup.py develop

    - name: Running tests with pytest
      run: |
        pytest

  universal_aarch64:
    strategy:
      matrix:
        pyver: [cp39-cp39]
      fail-fast: false
    runs-on: ubuntu-latest
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64

    steps:
    - uses: actions/checkout@v2

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1

    - name: Running tests with pytest
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            echo -e "\e[1;34m Installing python dependencies \e[0m" && \
            export BUILD_WITH_CYTHON=1 && export BUILD_FOR_DEBUG=1 && \
            python -m pip install --upgrade pip wheel && \
            pip install cython && \
            pip install -e '.[test]' && \
            rm simdjson/csimdjson.cpp && \
            python setup.py develop && \
            echo -e "\e[1;34m Running tests with pytest \e[0m" && \
            coverage run -m pytest && \
            deactivate'
  build_aarch64:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        pyver: [cp36-cp36m, cp37-cp37m, cp38-cp38, cp39-cp39]
    env:
      py: /opt/python/${{ matrix.pyver }}/bin/python
      img: quay.io/pypa/manylinux2014_aarch64

    steps:
    - uses: actions/checkout@v2

    - name: Set up QEMU
      id: qemu
      uses: docker/setup-qemu-action@v1

    - name: Running tests with pytest
      run: |
        docker run --rm -v ${{ github.workspace }}:/ws:rw --workdir=/ws \
            ${{ env.img }} \
            bash -exc '${{ env.py }} -m venv .env && \
            source .env/bin/activate && \
            echo -e "\e[1;34m Installing python dependencies \e[0m" && \
            export BUILD_WITH_CYTHON=1 && \
            python -m pip install --upgrade pip wheel && \
            pip install cython && \
            pip install -e '.[test]' && \
            rm simdjson/csimdjson.cpp && \
            python setup.py develop && \
            echo -e "\e[1;34m Running tests with pytest \e[0m" && \
            pytest && \
            deactivate'
